# -*- coding: utf-8 -*-
import json
import random
import os
import time
import requests
import urllib.parse
import difflib
import logging
import tempfile
import asyncio
from contextlib import contextmanager
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from pydub import AudioSegment
from background import keep_alive

# –õ–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("MEMEZVUKACH")
MEMES_JSON = "memes.json"
AUDIO_DIR = "meme_audios"
os.makedirs(AUDIO_DIR, exist_ok=True)

# –ú–µ–º–Ω—ã–µ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
MEME_SOUNDS = [
    ("scream", "https://freesound.org/data/previews/269/269764_4299048-lq.mp3"),  # –ì—Ä–æ–º–∫–∏–π –æ—Ä
    ("burp", "https://freesound.org/data/previews/136/136181_2396973-lq.mp3"),   # –†—ã–≥–∞–Ω–∏–µ
    ("cry", "https://freesound.org/data/previews/193/193353_2431407-lq.mp3"),    # –ü–ª–∞—á
    ("laugh", "https://freesound.org/data/previews/203/203714_2619675-lq.mp3"),  # –£–≥–∞—Ä–Ω—ã–π —Å–º–µ—Ö
    ("drake", "https://freesound.org/data/previews/364/364918_5910492-lq.mp3"),  # Drake "Yawn"
    ("airhorn", "https://freesound.org/data/previews/154/154955_2701569-lq.mp3"), # Airhorn
    ("vine_boom", "https://freesound.org/data/previews/622/622181_11866629-lq.mp3"), # Vine Boom
    ("anime_wow", "https://freesound.org/data/previews/156/156859_2538033-lq.mp3") # Anime Wow
]

# –ò—Å—Ç–æ—Ä–∏—è —Ñ—Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_phrase_history = {}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –º–µ–º–æ–≤
EMOJIS = {
    "welcome": "üöÄ",
    "help": "‚ÑπÔ∏è",
    "search": "üî•",
    "random": "üé∞",
    "audio": "üéôÔ∏è",
    "loading": "‚è≥",
    "error": "üòÖ",
    "success": "üí•",
    "meme": "üéâ",
    "action": "üß®",
    "fail": "ü´†",
    "vibe": "üòé"
}
EMOJI_MAP = {
    "–∞–∫—É–ª–∞": "ü¶à", "–∫–æ—Ç": "üòº", "—Å–æ–±–∞–∫–∞": "üê∂", "–¥–∏–Ω–æ–∑–∞–≤—Ä": "ü¶ñ",
    "–ø–æ–µ–∑–¥": "üöÇ", "—Ä–∞–∫–µ—Ç–∞": "üöÄ", "–∞–ª–∫–æ–≥–æ–ª—å": "üç∫", "—Ç–∞–Ω—Ü": "üï∫",
    "–∫—Ä–∏—á–∞": "üó£Ô∏è", "–±–æ–º–±–∞": "üí£", "–∫–æ—Å–º–æ—Å": "ü™ê", "–ø—É—Å—Ç—ã–Ω—è": "üèúÔ∏è",
    "–≥–æ—Ä–æ–¥": "üèôÔ∏è", "–ª–µ—Å": "üå¥", "–º–æ—Ä–µ": "üåä", "–µ–¥–∞": "üçî",
    "—Ñ—Ä—É–∫—Ç": "üçç", "–∫–æ—Ñ–µ": "‚òï", "–º–∞–≥–∏—è": "‚ú®", "–≤–∑—Ä—ã–≤": "üí•",
    "–∫—Ä–∏–Ω–∂": "üò¨", "—É–≥–∞—Ä": "üòÇ", "–∂–µ—Å—Ç—å": "ü¶ç", "–∞–±—Å—É—Ä–¥": "ü§™",
    "–≤–∑–ª—ë—Ç": "üõ´", "–∂–∞—Ä–∞": "üåû", "–ø–æ—Ö–µ—Ä": "üòè", "–ø—É—à–∫–∞": "üéØ",
    "–∏–≥—Ä–∞": "üéÆ", "–¥–∏—Å–∫": "üíø", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ": "ü™Ç", "–≤–∫—É—Å": "üçï"
}

# –ú–µ–Ω—é —Å —ç–º–æ–¥–∑–∏
MENU_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["üî• –ù–∞–π—Ç–∏ –º–µ–º", "üé∞ –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º"],
        ["‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç"]
    ],
    resize_keyboard=True
)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
@contextmanager
def temp_audio_files():
    mp3_fd, mp3_path = tempfile.mkstemp(suffix=".mp3", dir=AUDIO_DIR)
    ogg_fd, ogg_path = tempfile.mkstemp(suffix=".ogg", dir=AUDIO_DIR)
    try:
        yield mp3_path, ogg_path
    finally:
        time.sleep(2)
        for fd, path in [(mp3_fd, mp3_path), (ogg_fd, ogg_path)]:
            try:
                os.close(fd)
                if os.path.exists(path):
                    os.remove(path)
                    logger.info(f"Deleted temp file: {path}")
            except Exception as e:
                logger.warning(f"Failed to delete temp file {path}: {e}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
def generate_emoji(description):
    description = description.lower()
    for word, emoji in EMOJI_MAP.items():
        if word in description:
            logger.info(f"Selected emoji '{emoji}' for keyword '{word}' in description")
            return emoji
    default_emoji = random.choice(["üòÇ", "üò¨", "ü§™", "ü¶ç", "üçâ"])
    logger.info(f"No matching keyword found, selected default emoji '{default_emoji}'")
    return default_emoji

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–∑–∫–æ–π —Ñ—Ä–∞–∑—ã –±–µ–∑ –º–∞—Ç–∞
def generate_funny_phrase(user_id):
    if user_id not in user_phrase_history:
        user_phrase_history[user_id] = []
    user_phrases = user_phrase_history[user_id]
    
    prompt = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫—É—é, –¥–µ—Ä–∑–∫—É—é, –∞–±—Å—É—Ä–¥–Ω—É—é —Ñ—Ä–∞–∑—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º –≤ —Å—Ç–∏–ª–µ TikTok, —Å –ª—ë–≥–∫–∏–º —Å–ª–µ–Ω–≥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–æ—Ö–µ—Ä', '–Ω–∞—Ö–µ—Ä', '—Ñ–∏–≥–Ω—è'), –±–µ–∑ –º–∞—Ç–∞, —É–≥–∞—Ä–Ω—É—é, –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤."
    encoded_prompt = urllib.parse.quote(prompt, safe='')
    url = f"https://text.pollinations.ai/{encoded_prompt}"
    
    logger.info(f"Sending request for funny phrase for user {user_id}")
    for attempt in range(5):
        try:
            response = requests.get(url, timeout=15)
            response.raise_for_status()
            phrase = response.text.strip()
            if phrase and len(phrase) <= 50 and phrase not in user_phrases:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ PurgoMalum
                filter_url = f"https://www.purgomalum.com/service/containsprofanity?text={urllib.parse.quote(phrase)}"
                filter_response = requests.get(filter_url, timeout=5)
                if filter_response.text.lower() == "false":
                    logger.info(f"Generated funny phrase for user {user_id}: [filtered]")
                    user_phrases.append(phrase)
                    if len(user_phrases) > 20:
                        user_phrases.pop(0)
                    return phrase
            logger.warning(f"Invalid or repeated funny phrase for user {user_id}: [filtered]")
        except Exception as e:
            logger.error(f"Funny phrase generation error (attempt {attempt + 1}) for user {user_id}: {e}")
    
    # –ó–∞–ø–∞—Å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –±–µ–∑ –º–∞—Ç–∞
    backup_phrases = [
        "–ì–æ—Ä–∏, –±—Ä–æ, —ç—Ç–æ –ø—É—à–∫–∞! üéØ",
        "–§–∏–≥–Ω—è, –Ω–æ —É–≥–∞—Ä! üòÇ",
        "–ü–æ—Ö–µ—Ä, –º–µ–º —Ç–æ–ø! üí£",
        "–ù–∞—Ö–µ—Ä, –∂–≥–∏ –µ—â—ë! ü¶ç"
    ]
    available_phrases = [p for p in backup_phrases if p not in user_phrases]
    if not available_phrases:
        user_phrases.clear()
        available_phrases = backup_phrases
    phrase = random.choice(available_phrases)
    user_phrases.append(phrase)
    if len(user_phrases) > 20:
        user_phrases.pop(0)
    logger.info(f"Selected backup funny phrase for user {user_id}: {phrase}")
    return phrase

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–º–æ–≤
def load_memes():
    try:
        if not os.path.exists(MEMES_JSON):
            logger.error(f"Memes file {MEMES_JSON} not found")
            return []
        with open(MEMES_JSON, "r", encoding="utf-8") as f:
            data = json.load(f)
            return data.get("memes", [])
    except Exception as e:
        logger.error(f"Load memes error: {e}")
        return []

# –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
def find_closest_meme(query, memes):
    query = query.lower().strip()
    logger.info(f"Searching for meme by name: {query}")
    names = [m["name"].lower() for m in memes]
    closest = difflib.get_close_matches(query, names, n=1, cutoff=0.3)
    return next((m for m in memes if m["name"].lower() == closest[0]), None) if closest else None

# –ü–æ–∏—Å–∫ –º–µ–º–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
def find_meme_by_description(query, memes):
    query = query.lower().strip()
    logger.info(f"Searching for meme by description: {query}")
    descriptions = [(m, m["description"].lower()) for m in memes]
    best_match = None
    best_ratio = 0.0
    for meme, desc in descriptions:
        ratio = difflib.SequenceMatcher(None, query, desc).ratio()
        if ratio > best_ratio and ratio > 0.5:
            best_ratio = ratio
            best_match = meme
    if best_match:
        logger.info(f"Found meme by description: {best_match['name']} (ratio: {best_ratio})")
    return best_match

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
def download_meme_sound(sound_url, filename):
    try:
        response = requests.get(sound_url, stream=True, timeout=10)
        response.raise_for_status()
        with open(filename, "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        file_size = os.path.getsize(filename)
        logger.info(f"Downloaded meme sound to {filename}, size: {file_size} bytes")
        return True
    except Exception as e:
        logger.error(f"Failed to download meme sound {sound_url}: {e}")
        return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –º–µ–º–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
def generate_meme_audio(text, filename):
    sound_effect = random.choice(MEME_SOUNDS)
    effect_name, effect_url = sound_effect
    
    prompt = (
        f"–û–∑–≤—É—á—å –∫–∞–∫ –¥–µ—Ä–∑–∫–∏–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –ø–∞—Ü–∞–Ω —Å TikTok-–≤–∞–π–±–æ–º, —Å –∞–±—Å—É—Ä–¥–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –ª—ë–≥–∫–∏–º —Å–ª–µ–Ω–≥–æ–º (–ø–æ—Ö–µ—Ä, –Ω–∞—Ö–µ—Ä, —Ñ–∏–≥–Ω—è), –±–µ–∑ –º–∞—Ç–∞: {text}"
    )
    encoded_prompt = urllib.parse.quote(prompt, safe='')
    url = f"https://text.pollinations.ai/{encoded_prompt}?model=openai-audio&voice=echo&attitude=aggressive"
    
    logger.info(f"Sending audio request to API")
    for attempt in range(5):
        try:
            response = requests.get(url, stream=True, timeout=30)
            response.raise_for_status()
            
            with open(filename, "wb") as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            file_size = os.path.getsize(filename)
            if file_size < 1000:
                logger.warning(f"Generated audio file {filename} too small: {file_size} bytes")
                return False
            
            # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
            with tempfile.NamedTemporaryFile(suffix=".mp3", dir=AUDIO_DIR, delete=False) as effect_file:
                if download_meme_sound(effect_url, effect_file.name):
                    try:
                        main_audio = AudioSegment.from_mp3(filename)
                        effect_audio = AudioSegment.from_mp3(effect_file.name)
                        # –ù–∞–ª–æ–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –∫–æ–Ω—Ü–µ
                        combined = main_audio + effect_audio
                        combined.export(filename, format="mp3")
                        logger.info(f"Added meme sound effect '{effect_name}' to {filename}")
                    except Exception as e:
                        logger.warning(f"Failed to overlay meme sound: {e}")
            
            logger.info(f"Audio generated: {filename}, size: {os.path.getsize(filename)} bytes")
            return True
        except requests.HTTPError as e:
            logger.error(f"Audio API HTTP error (attempt {attempt + 1}): {e}")
        except Exception as e:
            logger.error(f"Audio API error (attempt {attempt + 1}): {e}")
    
    logger.error("Failed to generate audio after 5 attempts")
    return False

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OGG
def convert_to_ogg(mp3_path, ogg_path):
    try:
        audio = AudioSegment.from_mp3(mp3_path)
        audio = audio.set_frame_rate(44100).set_channels(1)
        audio.export(ogg_path, format="ogg", codec="libopus", bitrate="64k")
        file_size = os.path.getsize(ogg_path)
        logger.info(f"Converted to OGG: {ogg_path}, size: {file_size} bytes")
        return file_size > 1000
    except Exception as e:
        logger.error(f"Convert error: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"{EMOJIS['welcome']} MemeZvukach: —Ç–≤–æ–π –º–µ–º–Ω—ã–π –¥–≤–∏–∂! üéâü¶ç\n\n"
        "–ë—Ä–æ, –≤—Ä—ã–≤–∞–µ–º—Å—è –≤ TikTok-–≤–∞–π–±! üòéüíø\n"
        f"üî• –ù–∞–π–¥–∏ –º–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –≤–∞–π–±—É üß®\n"
        f"üé∞ –ö—Ä—É—Ç–∏ —Ä–∞–Ω–¥–æ–º –¥–ª—è —É–≥–∞—Ä–∞ üéÆ\n"
        f"‚ÑπÔ∏è –†–∞–∑–±–µ—Ä–∏, –∫–∞–∫ –∂–µ—á—å –∫–∞–∫ –±–æ—Å—Å üåû\n\n"
        "–ü–æ–≥–Ω–∞–ª–∏ –ª–æ–≤–∏—Ç—å –º–µ–º—ã! üí•üçï",
        reply_markup=MENU_KEYBOARD
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"{EMOJIS['help']} –ö–∞–∫ –∂–µ—á—å —Å MemeZvukach? üöÄüéØ\n\n"
        "–Ø —Ç–≤–æ–π –º–µ–º–Ω—ã–π –∫–æ—Ä–µ—à, –∫–∏–¥–∞—é –º–µ–º—ã —Å —É–≥–∞—Ä–Ω–æ–π –æ–∑–≤—É—á–∫–æ–π! üòÇü™Ç\n\n"
        "–ß—Ç–æ —É–º–µ—é:\n"
        f"üî• –ù–∞–π—Ç–∏ –º–µ–º ‚Äî –≤–±–µ–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–∞–π–± üå©Ô∏è\n"
        f"üé∞ –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º ‚Äî —Å—é—Ä–ø—Ä–∏–∑ —Å TikTok-–æ–≥–Ω—ë–º üéâ\n"
        f"{EMOJIS['audio']} –û–∑–≤—É—á–∫–∞ ‚Äî –¥–µ—Ä–∑–∫–∏–π –ø–∞—Ü–∞–Ω + –º–µ–º–Ω—ã–µ –∑–≤—É–∫–∏ üéôÔ∏èüí£\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/start ‚Äî –≤—Ä—ã–≤–∞–µ–º—Å—è –≤ –¥–≤–∏–∂! {EMOJIS['welcome']}\n"
        f"/help ‚Äî —ç—Ç–æ—Ç –≥–∞–π–¥ –ø–æ —É–≥–∞—Ä—É {EMOJIS['help']}\n"
        f"/random ‚Äî —Ä–∞–Ω–¥–æ–º–Ω—ã–π –º–µ–º–Ω—ã–π –≤–∑—Ä—ã–≤ {EMOJIS['random']}\n\n"
        "–ì–æ —Ç—É—Å–∏—Ç—å, –±—Ä–æ! üòéüçâ",
        reply_markup=MENU_KEYBOARD
    )

# –ö–æ–º–∞–Ω–¥–∞ /random
async def random_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = await update.message.reply_text(
            f"–ö–æ–ø–∞—é –º–µ–º–Ω—ã–π –∫–ª–∞–¥... {EMOJIS['loading']}üß®"
        )
        await asyncio.sleep(1.5)
        
        memes = load_memes()
        if not memes:
            await msg.edit_text(
                f"{EMOJIS['error']} –ú–µ–º—ã –∫–æ–Ω—á–∏–ª–∏—Å—å, —Ñ–∏–≥–Ω—è! üòÖ –í–±–µ–π —á—Ç–æ-–Ω–∏–±—É–¥—å! ü´†",
                reply_markup=MENU_KEYBOARD
            )
            return
        
        meme = random.choice(memes)
        user_id = update.effective_user.id
        response = await prepare_meme_response(meme, user_id)
        await msg.delete()
        await send_meme_response(update, context, response, meme)
        
    except Exception as e:
        logger.error(f"Random meme error: {e}")
        await update.message.reply_text(
            f"{EMOJIS['error']} –ß—ë—Ç –º–µ–º –Ω–µ –≤–∑–ª–µ—Ç–µ–ª, –¥–∞–≤–∞–π –µ—â—ë —Ä–∞–∑! üòÖü´†",
            reply_markup=MENU_KEYBOARD
        )

# –ü–æ–∏—Å–∫ –º–µ–º–∞
async def search_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"{EMOJIS['search']} –í–±–µ–π –º–µ–º –∏–ª–∏ –µ–≥–æ –≤–∞–π–±, –±—Ä–æ! üòéüî•",
        reply_markup=MENU_KEYBOARD
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    
    if text == "üî• –ù–∞–π—Ç–∏ –º–µ–º":
        return await search_meme(update, context)
    elif text == "üé∞ –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º":
        return await random_meme(update, context)
    elif text == "‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç":
        return await help_command(update, context)
    
    try:
        msg = await update.message.reply_text(
            f"–ò—â—É —Ç–≤–æ–π –º–µ–º, –¥–µ—Ä–∂–∏—Å—å... {EMOJIS['loading']}üå©Ô∏è"
        )
        await asyncio.sleep(1.5)
        
        memes = load_memes()
        if not memes:
            await msg.edit_text(
                f"{EMOJIS['error']} –ú–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ—Ö–µ—Ä! üòÖ –í–±–µ–π –¥—Ä—É–≥–æ–π! ü´†",
                reply_markup=MENU_KEYBOARD
            )
            return
        
        meme = find_closest_meme(text, memes)
        if not meme or difflib.SequenceMatcher(None, text.lower(), meme["name"].lower()).ratio() < 0.6:
            meme = find_meme_by_description(text, memes) or meme
        
        if not meme:
            await msg.edit_text(
                f"{EMOJIS['error']} –ú–µ–º —É—Å–∫–æ–ª—å–∑–Ω—É–ª, —Ñ–∏–≥–Ω—è! üòÖ –î–∞–≤–∞–π –¥—Ä—É–≥–æ–π! ü´†",
                reply_markup=MENU_KEYBOARD
            )
            return
        
        user_id = update.effective_user.id
        response = await prepare_meme_response(meme, user_id)
        await msg.delete()
        await send_meme_response(update, context, response, meme)
        
    except Exception as e:
        logger.error(f"Handle text error: {e}")
        await update.message.reply_text(
            f"{EMOJIS['error']} –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—Ö–µ—Ä! üòÖ –ì–æ –∑–∞–Ω–æ–≤–æ! ü´†",
            reply_markup=MENU_KEYBOARD
        )

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def prepare_meme_response(meme, user_id):
    emoji = generate_emoji(meme["description"])
    funny_phrase = generate_funny_phrase(user_id)
    voice_text = f"{meme['name']}! {meme['tiktok_phrase']}, {funny_phrase}"
    
    logger.info(f"Preparing response for meme '{meme['name']}' for user {user_id} with emoji '{emoji}'")
    
    try:
        return {
            "type": "voice",
            "voice_text": voice_text,
            "caption": (
                f"{emoji} {meme['name']} üéâ\n\n"
                f"{meme['description']} üìú\n\n"
                f"{EMOJIS['success']} –ï—â—ë –º–µ–º—á–∏–∫, –±—Ä–æ? üí•üòé"
            ),
            "reply_markup": MENU_KEYBOARD
        }
    except Exception as e:
        logger.error(f"Prepare meme response error for user {user_id}: {e}")
        return {
            "type": "text",
            "text": (
                f"{EMOJIS['error']} –ú–µ–º —Å–ª–æ–º–∞–ª—Å—è, —Ñ–∏–≥–Ω—è! üòÖ\n\n"
                f"{emoji} {meme['name']} üéâ\n{meme['description']} üìú\n\n"
                f"–ì–æ –∑–∞–Ω–æ–≤–æ, –±—Ä–æ? ü´†"
            ),
            "reply_markup": MENU_KEYBOARD
        }

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def send_meme_response(update: Update, context: ContextTypes.DEFAULT_TYPE, response, meme):
    try:
        if response["type"] == "voice":
            with temp_audio_files() as (mp3_path, ogg_path):
                await context.bot.send_chat_action(
                    chat_id=update.effective_chat.id,
                    action="record_voice"
                )
                audio_success = False
                if generate_meme_audio(response["voice_text"], mp3_path):
                    if convert_to_ogg(mp3_path, ogg_path):
                        audio_success = True
                        with open(ogg_path, "rb") as audio_file:
                            await update.message.reply_voice(
                                voice=audio_file,
                                caption=response["caption"],
                                reply_markup=response["reply_markup"]
                            )
                        logger.info(f"Voice message sent successfully")
                        return
                
                logger.warning("Audio generation failed, sending text response")
                emoji = generate_emoji(meme["description"])
                await update.message.reply_text(
                    f"{emoji} {meme['name']} üéâ\n\n"
                    f"{meme['description']} üìú\n\n"
                    f"{EMOJIS['error']} –ê—É–¥–∏–æ –Ω–µ –∑–∞—à–ª–æ, –ø–æ—Ö–µ—Ä! üòÖ –ú–µ–º –ø—É—à–∫–∞! ü´†",
                    reply_markup=response["reply_markup"]
                )
        else:
            await update.message.reply_text(
                response["text"],
                reply_markup=response["reply_markup"]
            )
    except Exception as e:
        logger.error(f"Send meme response error: {e}")
        emoji = generate_emoji(meme["description"])
        await update.message.reply_text(
            f"{EMOJIS['error']} –ú–µ–º –ø–æ—Ç–µ—Ä—è–ª—Å—è, —Ñ–∏–≥–Ω—è! üòÖ\n\n"
            f"{emoji} {meme['name']} üéâ\n{meme['description']} üìú\n\n"
            f"–ì–æ –¥–∞–ª—å—à–µ, –±—Ä–æ? üí•üòé",
            reply_markup=MENU_KEYBOARD
        )

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        logger.error("TELEGRAM_TOKEN not set in environment variables")
        raise ValueError("TELEGRAM_TOKEN is required")
    
    logger.info("MEMEZVUKACH —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
    
    try:
        app = Application.builder().token(TOKEN).build()
    except Exception as e:
        logger.error(f"Failed to initialize bot: {e}")
        raise
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("random", random_meme))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∂–µ—á—å –º–µ–º—ã!")
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –¥–ª—è "keep alive"
    try:
        app.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Polling error: {e}")
        raise

if __name__ == "__main__":
    main()
